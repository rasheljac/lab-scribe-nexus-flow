
import jsPDF from 'jspdf';

interface ProtocolPDFData {
  title: string;
  description?: string;
  content: string;
  category: string;
  version: number;
  createdAt: string;
  updatedAt: string;
}

export const exportProtocolToPDF = async (protocol: ProtocolPDFData) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - (margin * 2);
  let currentY = margin;

  // Load and add logo
  try {
    const logo = new Image();
    logo.crossOrigin = 'anonymous';
    
    await new Promise((resolve, reject) => {
      logo.onload = resolve;
      logo.onerror = reject;
      logo.src = '/lovable-uploads/305ae0c2-f9ba-42cc-817b-eda518f05406.png';
    });

    // Calculate logo dimensions maintaining aspect ratio
    const logoAspectRatio = logo.width / logo.height;
    const maxLogoWidth = 40;
    const maxLogoHeight = 20;
    
    let logoWidth = maxLogoWidth;
    let logoHeight = logoWidth / logoAspectRatio;
    
    if (logoHeight > maxLogoHeight) {
      logoHeight = maxLogoHeight;
      logoWidth = logoHeight * logoAspectRatio;
    }

    // Add logo to top right
    pdf.addImage(logo, 'PNG', pageWidth - margin - logoWidth, currentY, logoWidth, logoHeight);
    currentY += logoHeight + 10;
  } catch (error) {
    console.warn('Could not load logo for PDF export:', error);
    currentY += 10;
  }

  // Add title
  pdf.setFontSize(24);
  pdf.setFont('helvetica', 'bold');
  const titleLines = pdf.splitTextToSize(protocol.title, contentWidth - 50);
  pdf.text(titleLines, margin, currentY);
  currentY += (titleLines.length * 8) + 10;

  // Add metadata section
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'normal');
  pdf.setTextColor(100, 100, 100);
  
  const metadata = [
    `Category: ${protocol.category.charAt(0).toUpperCase() + protocol.category.slice(1)}`,
    `Version: v${protocol.version}`,
    `Created: ${new Date(protocol.createdAt).toLocaleDateString()}`,
    `Updated: ${new Date(protocol.updatedAt).toLocaleDateString()}`
  ];
  
  metadata.forEach(line => {
    pdf.text(line, margin, currentY);
    currentY += 5;
  });
  currentY += 10;

  // Add description if available
  if (protocol.description) {
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 0, 0);
    pdf.text('Description:', margin, currentY);
    currentY += 7;
    
    pdf.setFont('helvetica', 'normal');
    const descLines = pdf.splitTextToSize(protocol.description, contentWidth);
    pdf.text(descLines, margin, currentY);
    currentY += (descLines.length * 5) + 10;
  }

  // Add separator line
  pdf.setDrawColor(200, 200, 200);
  pdf.line(margin, currentY, pageWidth - margin, currentY);
  currentY += 10;

  // Add content section
  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'bold');
  pdf.setTextColor(0, 0, 0);
  pdf.text('Protocol Steps & Instructions:', margin, currentY);
  currentY += 10;

  // Process content (strip HTML tags for PDF)
  const stripHtml = (html: string) => {
    const tmp = document.createElement("div");
    tmp.innerHTML = html;
    return tmp.textContent || tmp.innerText || "";
  };

  const cleanContent = stripHtml(protocol.content);
  
  pdf.setFont('helvetica', 'normal');
  pdf.setFontSize(11);
  
  // Split content into lines and handle page breaks
  const contentLines = pdf.splitTextToSize(cleanContent, contentWidth);
  const lineHeight = 6;
  
  for (let i = 0; i < contentLines.length; i++) {
    // Check if we need a new page
    if (currentY + lineHeight > pageHeight - margin) {
      pdf.addPage();
      currentY = margin;
      
      // Add logo to new page header
      try {
        const logo = new Image();
        logo.crossOrigin = 'anonymous';
        logo.src = '/lovable-uploads/305ae0c2-f9ba-42cc-817b-eda518f05406.png';
        
        await new Promise((resolve) => {
          logo.onload = () => {
            const logoAspectRatio = logo.width / logo.height;
            const logoWidth = 30;
            const logoHeight = logoWidth / logoAspectRatio;
            pdf.addImage(logo, 'PNG', pageWidth - margin - logoWidth, 10, logoWidth, logoHeight);
            resolve(null);
          };
          logo.onerror = () => resolve(null);
        });
      } catch (error) {
        // Silently continue if logo fails to load
      }
      
      currentY = margin + 25;
    }
    
    pdf.text(contentLines[i], margin, currentY);
    currentY += lineHeight;
  }

  // Add footer with branding
  const totalPages = pdf.internal.pages.length - 1;
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Generated by Kapelczak Lab Management System`, margin, pageHeight - 10);
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 20, pageHeight - 10);
  }

  // Save the PDF
  const fileName = `${protocol.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_protocol.pdf`;
  pdf.save(fileName);
};
