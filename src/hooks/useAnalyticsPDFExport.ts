
import { useMutation } from "@tanstack/react-query";
import { useAuth } from "@/hooks/useAuth";
import jsPDF from 'jspdf';
import { addLogoToPDF, addFooter } from '@/utils/pdfExportUtils';

export const useAnalyticsPDFExport = () => {
  const { user } = useAuth();

  const exportAnalyticsToPDF = useMutation({
    mutationFn: async ({ 
      data,
      reportTitle = "KAPELCZAK LABORATORY - ANALYTICS REPORT"
    }: {
      data: any;
      reportTitle?: string;
    }) => {
      if (!user) throw new Error('User not authenticated');

      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);
      let yPosition = 20;

      // Add logo
      const logoHeight = await addLogoToPDF(pdf, pageWidth, margin);
      yPosition = margin + logoHeight;

      // Add header
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text(reportTitle, margin, yPosition);
      yPosition += 12;

      // Add generation info
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      const exportTime = new Date().toLocaleString();
      pdf.text(`Generated on: ${exportTime}`, margin, yPosition);
      yPosition += 6;
      pdf.text(`Generated by: ${user.email}`, margin, yPosition);
      yPosition += 20;

      // Helper function to check if we need a new page
      const checkPageBreak = (requiredSpace: number) => {
        if (yPosition + requiredSpace > pageHeight - 30) {
          pdf.addPage();
          yPosition = 30;
          return true;
        }
        return false;
      };

      // Add Key Metrics section
      checkPageBreak(60);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Performance Metrics', margin, yPosition);
      yPosition += 15;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      const metrics = [
        { label: 'Total Experiments', value: data.totalExperiments },
        { label: 'Completed Experiments', value: data.completedExperiments },
        { label: 'Tasks Completed', value: data.completedTasks },
        { label: 'Total Tasks', value: data.totalTasks },
        { label: 'Active Projects', value: data.totalProjects },
        { label: 'Average Completion Time', value: `${data.avgCompletionTime} days` },
      ];

      metrics.forEach(metric => {
        checkPageBreak(8);
        pdf.text(`${metric.label}: ${metric.value}`, margin, yPosition);
        yPosition += 8;
      });

      yPosition += 15;

      // Add Experiment Status Distribution
      checkPageBreak(40);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Experiment Status Distribution', margin, yPosition);
      yPosition += 15;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      if (data.experimentStatusData && data.experimentStatusData.length > 0) {
        data.experimentStatusData.forEach((status: any) => {
          checkPageBreak(8);
          const percentage = data.totalExperiments > 0 
            ? ((status.value / data.totalExperiments) * 100).toFixed(1)
            : '0';
          pdf.text(`${status.name}: ${status.value} (${percentage}%)`, margin, yPosition);
          yPosition += 8;
        });
      } else {
        pdf.text('No experiment data available', margin, yPosition);
        yPosition += 8;
      }

      yPosition += 15;

      // Add Monthly Activity Summary
      checkPageBreak(40);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Monthly Activity Summary', margin, yPosition);
      yPosition += 15;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      if (data.monthlyData && data.monthlyData.length > 0) {
        data.monthlyData.forEach((month: any) => {
          checkPageBreak(8);
          pdf.text(`${month.month}: ${month.experiments} experiments, ${month.reports} reports, ${month.tasks} tasks`, margin, yPosition);
          yPosition += 8;
        });
      }

      yPosition += 15;

      // Add Key Insights
      checkPageBreak(60);
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Insights', margin, yPosition);
      yPosition += 15;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');

      const insights = [
        `Experiment completion rate: ${data.totalExperiments > 0 ? Math.round((data.completedExperiments / data.totalExperiments) * 100) : 0}%`,
        `Task completion rate: ${data.totalTasks > 0 ? Math.round((data.completedTasks / data.totalTasks) * 100) : 0}%`,
        `Active team members: ${data.activeTeamMembers} working on ${data.totalProjects} projects`,
        `Average experiment completion time: ${data.avgCompletionTime} days`,
      ];

      insights.forEach(insight => {
        checkPageBreak(10);
        const lines = pdf.splitTextToSize(`â€¢ ${insight}`, contentWidth - 10);
        lines.forEach((line: string) => {
          pdf.text(line, margin, yPosition);
          yPosition += 6;
        });
        yPosition += 4;
      });

      // Add footer to all pages
      addFooter(pdf, pageWidth, pageHeight, margin);

      // Save the PDF
      const fileName = `Analytics_Report_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);

      return { success: true };
    },
  });

  return {
    exportAnalyticsToPDF,
  };
};
