
import { useMutation } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/hooks/useAuth";
import jsPDF from 'jspdf';

export const useEnhancedReports = () => {
  const { user } = useAuth();

  const generateComprehensiveReport = useMutation({
    mutationFn: async ({ 
      title, 
      experimentIds, 
      includeNotes = true, 
      includeAttachments = true 
    }: {
      title: string;
      experimentIds?: string[];
      includeNotes?: boolean;
      includeAttachments?: boolean;
    }) => {
      if (!user) throw new Error('User not authenticated');

      // Fetch experiments data
      let experimentsQuery = supabase
        .from('experiments')
        .select('*')
        .eq('user_id', user.id);

      if (experimentIds && experimentIds.length > 0) {
        experimentsQuery = experimentsQuery.in('id', experimentIds);
      }

      const { data: experiments, error: experimentsError } = await experimentsQuery;
      if (experimentsError) throw experimentsError;

      // Fetch notes if requested
      let allNotes: any[] = [];
      if (includeNotes && experiments.length > 0) {
        const { data: notes, error: notesError } = await supabase
          .from('experiment_notes')
          .select('*')
          .in('experiment_id', experiments.map(e => e.id));
        
        if (notesError) throw notesError;
        allNotes = notes || [];
      }

      // Fetch attachments if requested
      let allAttachments: any[] = [];
      if (includeAttachments && experiments.length > 0) {
        const { data: attachments, error: attachmentsError } = await supabase
          .from('experiment_attachments')
          .select('*')
          .in('experiment_id', experiments.map(e => e.id));
        
        if (attachmentsError) throw attachmentsError;
        allAttachments = attachments || [];
      }

      // Generate PDF
      const pdf = new jsPDF();
      let yPosition = 30;
      const pageHeight = pdf.internal.pageSize.height;
      const margin = 20;

      // Add Kapelczak logo (placeholder - you'll need to add the actual logo)
      pdf.setFontSize(16);
      pdf.text('KAPELCZAK LABORATORY', margin, 20);

      // Add title
      pdf.setFontSize(20);
      pdf.text(title, margin, yPosition);
      yPosition += 15;

      // Add generation info
      pdf.setFontSize(10);
      const exportTime = new Date().toLocaleString();
      pdf.text(`Generated on: ${exportTime}`, margin, yPosition);
      yPosition += 10;
      pdf.text(`Generated by: ${user.email}`, margin, yPosition);
      yPosition += 20;

      // Add experiments data
      experiments.forEach((experiment) => {
        // Check if we need a new page
        if (yPosition > pageHeight - 60) {
          pdf.addPage();
          yPosition = 30;
        }

        pdf.setFontSize(16);
        pdf.text(`Experiment: ${experiment.title}`, margin, yPosition);
        yPosition += 10;

        pdf.setFontSize(10);
        // Description with text wrapping
        if (experiment.description) {
          const descriptionLines = pdf.splitTextToSize(`Description: ${experiment.description}`, pdf.internal.pageSize.width - 2 * margin);
          pdf.text(descriptionLines, margin, yPosition);
          yPosition += descriptionLines.length * 5;
        }

        pdf.text(`Status: ${experiment.status}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Researcher: ${experiment.researcher}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Start Date: ${experiment.start_date}`, margin, yPosition);
        yPosition += 6;
        pdf.text(`Progress: ${experiment.progress}%`, margin, yPosition);
        yPosition += 15;

        // Add notes for this experiment
        const experimentNotes = allNotes.filter(note => note.experiment_id === experiment.id);
        if (experimentNotes.length > 0) {
          if (yPosition > pageHeight - 80) {
            pdf.addPage();
            yPosition = 30;
          }

          pdf.setFontSize(12);
          pdf.text('Notes:', margin, yPosition);
          yPosition += 10;

          experimentNotes.forEach(note => {
            if (yPosition > pageHeight - 40) {
              pdf.addPage();
              yPosition = 30;
            }

            pdf.setFontSize(10);
            pdf.text(`• ${note.title}`, margin + 5, yPosition);
            yPosition += 6;
            
            if (note.content) {
              // Strip HTML tags and handle text wrapping
              const cleanContent = note.content.replace(/<[^>]*>/g, '').substring(0, 200);
              const contentLines = pdf.splitTextToSize(`  ${cleanContent}${note.content.length > 200 ? '...' : ''}`, pdf.internal.pageSize.width - 2 * margin - 10);
              pdf.text(contentLines, margin + 10, yPosition);
              yPosition += contentLines.length * 5 + 5;
            }
          });
          yPosition += 10;
        }

        // Add attachments for this experiment
        const experimentAttachments = allAttachments.filter(att => att.experiment_id === experiment.id);
        if (experimentAttachments.length > 0) {
          if (yPosition > pageHeight - 60) {
            pdf.addPage();
            yPosition = 30;
          }

          pdf.setFontSize(12);
          pdf.text('Attachments:', margin, yPosition);
          yPosition += 10;

          experimentAttachments.forEach(attachment => {
            if (yPosition > pageHeight - 30) {
              pdf.addPage();
              yPosition = 30;
            }
            pdf.setFontSize(10);
            pdf.text(`• ${attachment.filename} (${attachment.file_type})`, margin + 5, yPosition);
            yPosition += 6;
          });
          yPosition += 10;
        }

        yPosition += 15;
      });

      // Add footer to all pages
      const pageCount = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.text('© Kapelczak Laboratory - Confidential', margin, pageHeight - 10);
        pdf.text(`Page ${i} of ${pageCount}`, pdf.internal.pageSize.width - margin - 30, pageHeight - 10);
      }

      // Save the PDF
      const pdfBlob = pdf.output('blob');
      const url = window.URL.createObjectURL(pdfBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${title.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      return { success: true };
    },
  });

  return {
    generateComprehensiveReport,
  };
};
